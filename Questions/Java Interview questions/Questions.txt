Coding questions:
1. Find the maximum element in an array.
    Technique: Iteration through the array.

2. Find the minimum element in an array.    
  Technique: Iteration through the array.

3. Calculate the sum of all elements in an array.    
  Technique: Iteration through the array.

4. Reverse an array.    
Technique: Two-pointer approach or iterative swapping.Check if an array is sorted.
    Technique: Iteration through the array.

5. Remove duplicates from a sorted array.
    Technique: Two-pointer approach.

6. Rotate an array to the right by k steps.
    Technique: Basic array manipulation.

7. Implement an algorithm to find the "Kth" largest element in an array.
    Technique: Sorting or use of max heap.

Two Sum [Solution]
Valid Parentheses [Solution]
Merge Two Sorted Lists [Solution]
Best Time to Buy and Sell Stock [Solution]
Valid Palindrome [Solution]
Invert Binary Tree
Valid Anagram
Binary Search
Linked List Cycle
Maximum Depth of Binary Tree
Single Number
Reverse Linked List
Majority Element
Missing Number
Reverse String
Diameter of Binary Tree [Solution]
Middle of the Linked List [Solution]
Convert Sorted Array to Binary Search Tree
Maximum Subarray [Solution]

Object-Oriented Programming (OOP)
1. What are the four pillars of Object-Oriented Programming in Java?
2. Explain the difference between == and equals() in Java.
3. What is method overloading and method overriding in Java?
4. What is the purpose of the final keyword in Java?
5. How is the hashCode() method related to equals() in Java?
6. What is the default keyword in Java 8 interfaces?
7. What is an interface in Java, and how is it different from an abstract class?
8. What are functional interfaces in Java?
9. What is the use of @FunctionalInterface annotation?
10. Explain the concept of pass-by-value in Java.
11. What is static key word and how do we use it java?

Data Structures and Collections
1. How does HashMap work internally in Java?
2. What is the difference between ArrayList and LinkedList in Java?
3. What is the difference between ArrayList and Vector in Java?
4. What are the differences between HashSet and TreeSet?
5. How do you make a thread-safe collection in Java?
6. What is the difference between HashMap and Hashtable in Java?
7. What is the difference between String, StringBuilder, and StringBuffer in Java?

Concurrency and Multithreading
1. What is multithreading in Java, and how is it achieved?
2. What is the role of the volatile keyword in Java?
3. How does synchronized work in Java?
4. What is the purpose of Thread.sleep()?
5. What are Callable and Future in Java?
6. How does the fork/join framework work in Java?
7. What is the difference between join() and wait() methods in Java?
8. What is the role of ExecutorService in Java?
9. What is the difference between Runnable and Callable?
10. What is the purpose of Thread.join() method in Java?

Exception Handling
1. What is the difference between checked and unchecked exceptions?
2. What is the significance of Optional in Java 8?
3. How do you handle exceptions in Java?
4. Explain the difference between throw and throws.
5. What is the use of the @ExceptionHandler annotation in Spring Boot?
6. What is the purpose of @ControllerAdvice in Spring Boot for exception handling?

Java 8 Features
1. What is method reference in Java 8?
2. What is the Stream API in Java 8?
3. What is the purpose of the @Override annotation in Java?
4. What is the purpose of Optional in Java 8?
5. How do you implement lambda expressions in Java?

Memory Management and Performance
1. How does garbage collection work in Java?
2. What are the types of memory used in Java?
3. What is the difference between shallow copy and deep copy?
4. How does Java handle memory management, and what are its key components?

Miscellaneous
1. What is the Serializable interface, and why is it used in Java?
2. What is method overloading and method overriding in Java?
3. How do you implement logging in Java?
4. What are annotations in Java, and how are they used?
5. What is the difference between Array and ArrayList in Java?






-----------------------------------------------------------------------
Cognizent interview
Core Java
1. == and .equal() difference
2. Java 8 featuers.
3. Why do we use Streams and its user.
4. HashMap internal working.
5. What is Singleton class and how can me sure that it is singleton. how can we make sure it has only one instance.
6. Why String is immutable
7. Code for Fibannoic series in Java.

Spring boot:
1. What are annotations you use majorly.
2. What is Spring MVC.
3. What are the benfits of Spring boot.
4. Dependency inject, its type and write a code to implement it.
5. 

SQL:
1. LEFT JOIN
2. Write a query to fetch the data from table B and map them to table A when column is matched.
-----------------------------------
TCS:
Core Java:
1. Functional Interface
2. Java 8 features.
3. What is Lambda expression
4. Write a code for cube using functional interface.
5. Code to reverse a array upto n number.

Spring boot 
@Profile
ResponseEntity 

Docker file.



